# it is a problem about using for loop
# shortcomings: 
# 1. not familiar with range(1, n), which is from 1 to n-1
# 2. do not know when to use return!!! it is not indented in if judgement

# brute method:
# time complexity: O(n^2)
# space complexity: O(1)
'''
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        for i in range(0, len(nums)-1):
            for j in range(i+1, len(nums)):
                if(nums[i] + nums[j] == target):
                   # continue
                    return [i, j]
'''
# my hash method:
# use 2 for loop, which does not reduce time complexity
'''
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        dict = {}
        for i in range(0, len(nums)):
            dict[i] = nums[i]
            for j in range(0, i):
                if(dict[j] == target - nums[i]):
                    return[i, j]
'''
# others:
# advantage: 
# 1. time complexity is O(n), which is much faster than mine
#    space complexity is O(n)
# 2. use enumerate function, which return a tuple(key, value)
# 3. use "in", which can get key of dictionary, it is great!!!
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        seen = {}
        for i, value in enumerate(nums):
            remaining = target - nums[i]
            if remaining in seen:
                return [i, seen[remaining]]
            seen[value] = i
