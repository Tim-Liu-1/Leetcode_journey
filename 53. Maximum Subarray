# I did not figure out this problem firstly.
'''
O(n) n : length of array 
Example : [-2,1,-3,4,-1,2,1,-5,4]
step 0 : currSum = maxResult =-2
step 1 : currSum = max(-2+1,1) =1  --> maxResult = 1
step 2 : currSum = max(1+-3,-3) = -2  --> maxResult = 1
step 3 : currSum = max(-2 + 4,4) = 4  --> maxResult = 4
step 4 : currSum = max( 4 - 1 ,-1) = 3  --> maxResult = 4
step 5 : currSum = max( 3 + 2 ,2) = 5  --> maxResult = 5
step 5 : currSum = max( 5 + 1 ,1) = 6 --> maxResult = 6
step 6 : currSum = max( 6 - 5 ,-5) = 1 --> maxResult = 6
step 7 : ...........
'''
# that is to say, I need to find a region from (earlier max + this interger) < this interger
#                                         to currSum < maxResult
# in reality, we do not need to figure out the region, we only need to get maximum, which is much easier
'''
# pay attention to this for loop, when we dice the list, we get the value of the list rather than sequence number
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        currSum = maxResult = nums[0]
        for i in nums[1:]:  # wrong!!!!!
            currSum += nums[i]
            currSum = max(currSum, nums[i])
            maxResult = max(currSum, maxResult)
        return maxResult
'''
 
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        currSum = maxResult = nums[0]
        for num in nums[1:]:
            currSum += num
            currSum = max(currSum, num)
            maxResult = max(currSum, maxResult)
        return maxResult
